#!/usr/bin/env python
# coding: utf-8

# # 2장. 기본자료형과 변수
# 이 장에서는 기본 자료형(정수형, 실수형, 문자열)과  변수, 그리고 산술연산자를 이용하여 수식을 표현하는 방법을 알아본다.

# :::{admonition} 학습목표와 기대효과 
# :class: info  
# - 학습목표
#   - 기본자료형을 알아보자.
#   - 산술연산자를 이용하여 수식을 표현해보자.
#   - 숫자, 문자 데이터를 변수에 저장해보자.
# 
# - 기대효과
#   - 파이썬으로 산술연산을 위한 표현식을 작성할 수 있다.
#   - 정수, 실수, 문자열 자료 저장을 위한 변수의 개념을 이해할 수 있다.

# ## 기본 자료형
# 파이썬은 다양한 데이터 타입(자료형, Data Type)을 지원하고 있다.  
# **데이터 타입**은 데이터가 가지고 있는 속성을 의미하며, 데이터 타입에 따라 지원하는 연산이 다르다.  
# 파이썬이 지원하는 몇 가지 주요 데이터 타입을 알아보고, 그에 따른 연산식을 표현해보자.
# - 숫자형 데이터 타입(Numeric types)
#   - 정수형(Integer)
#   - 실수형(Float)
# - 문자열(String)
# - 불(Bool)
# - None

# :::{admonition} 참고  
# :class: tip  
# 다른 프로그래밍 언어에서는 실수형에 float과 double형이 존재하지만 파이썬에서는 double형은 따로 존재하지 않는다.
# 
# 
# 또한 문자(char) 와 문자열(string)을 따로 분류하고 있지만, 파이썬에서는 문자 길이에 상관 없이 문자열로 다루고 있다.

# ### 정수형 데이터
# 
# **정수형 데이터**는 0을 포함한 자연수이다. 예를들어, ..., -100, -10, 0, 1, 10, 100, ... 등이 정수형 데이터이다.

# ### 실수형 데이터
# 
# **실수형 데이터**는 소수점을 가진 수로 -5.432, 0.0, 5.0, 9.5, ... 등이 실수형 데이터이다.

# ### 숫자형 연산자(Numeric operators)
# 정수형, 실수형 데이터는 다음과 같은 산술연산자를 사용하여 연산이 가능하다.
# 
# 
# |연산 기호|의미|예시|실행 결과|
# |:----------:|:----------|:----------:|:--------:|
# |`+`|덧셈(Addition)| `2 + 2` |`4`|
# |`-`|뺄셈(Subtraction)| `2.0 - 2.0` | `0.0`|
# |`*`|곱셈(Multiplication)| `2 * 3` | `6`|
# |`/`|나눗셈(Division)|`6 / 3`|`2.0`|
# |`//`|버림나눗셈,몫(Floor division)|`10 / 2`|`5`|
# |`%`|나머지(Remainder)|`3 % 2`|`1`|
# |`**`|제곱(Square)|`2 ** 3`|`8`|

# :::{admonition} 참고  
# :class: warning
# 정수값으로 연산을 하면 그 결과는 정수형으로 나오고, 실수값으로 연산을 하면 그 결과는 실수형으로 나온다. 
# 
# 그러나 나눗셈(Division) 연산의 경우의 정수값, 실수값 관계없이 항상 그 결과는 실수형으로 나온다. 
# 
# 
# 또한, 제곱연산자의 경우 ^로 표기하지 않도록 주의하자.  

# 코드셀에 간단한 수식을 작성해보자. 

# In[1]:


2+2


# 코드셀을 실행하는 방법은 1장에서 설명한 바와 같이, 코드셀 앞에 플레이 버튼처럼 생긴 실행버튼을 눌러도 되고, 단축키를 사용해도 된다. 
# 
# - **Ctrl + Enter** : 코드셀 실행 후 커서는 방금 실행한 셀에 있다.
# - **Shift + Enter** : 코드셀 실행 후 커서가 다음 셀로 넘어간다. 다음 셀이 없을 경우, 새로운 셀이 만들어진다.
# 
# 셀을 실행을 시키면 셀 아래에 결과가 출력된다. 

# 연산자가 손에 익히도록 간단한 수식이지만 아래의 문제를 코드로 작성해보자. 

# In[2]:


# 10 나누기 3의 결과를 구하시오.


# In[3]:


# 50 나누기 4의 몫을 구하시오.


# In[4]:


# 50 나누기 4의 나머지를 구하시오.


# In[5]:


# 3의 2제곱의 결과를 구하시오.


# :::{admonition} 참고  
# :class: info
# 
# python에서는 정수데이타를 표현할 수 있는 범위의 한계는 없다. 즉, 엄청 큰 자리수까지 버림없이 표현이 가능하다. 

# In[6]:


# 정수의 경우 엄청 큰 자리수까지 표현가능
123456789012345678901234567890 * 1234556677


# In[7]:


4434567788884344431667886553 - 3354565631156734333583729667788999900


# :::{admonition} 참고  
# :class: info
# 
# 실수형 데이터 타입의 경우 정수데이타와 달리 유효숫자의 범위에 대한 한계가 존재한다.
# 
# 
# 컴퓨터에서 표준화된 **실수형 데이터 표기법**은 크게 두 가지가 있다. 
# 
# 첫 번째는 0.12, 1.12345678 등과 같이 우리가 흔히 아는 **소수점 표현 방식**이다. 소수점 표현 방식의 
# 유효한 자리수의 한계는 소수점 16자리이다.
# 
# 두 번째는 **지수 표현 방식**이다. 지수(Exponential)는 E로 표기하는데 과학이나 공학에서 아주 큰 숫자를 간단하게 표기할 때 사용하며, 의미는 10^이다. 
# 예를들어, 1.23e+5은 1.23 * (10**5)이며, 123000.0과 같다.
# 지수표현 방식 역시 유효한 자리수의 한계를 가진다.

# In[8]:


# 소수점 표현 방식, 유효한 자리수의 한계(소수점 16자리)
1.12345678901234567890123456789


# 소수점 17자리에서 반올림되어 소수점 16자리까지 표현되는 것을 확인할 수 있다.

# In[9]:


# 지수표현 방식
1.23e+5


# 1.23e+5는 1.23 * (10**5)로 123000.0과 같다.

# In[10]:


1.23e-4 


#  1.23e-4는 1.23 * (10**-4)로 0.000123과 같다.

# In[11]:


1.23e+308


# 1.23 * (10**308)이지만 지수표현 방식으로 표현이 가능하다.

# In[12]:


1.23e+309


# 1.23e+309는 지수 표현 방식에서 유효한 자리수의 한계를 넘어가서 **inf**(infinity)로 나온다.

# ### 문자열 데이터
# 
# 문자열은 텍스트의 묶음으로 **홑 따옴표, 쌍 따옴표, 트리플 따옴표**로 묶어준다. 
# 
# 즉 코드에서 이들 기호를 만나면 문자열의 시작 또는 끝을 나타내는 기호로 인식한다. 
# 
# 문자열이 한줄인 경우에는 홑 따옴표, 쌍 따옴표, 트리플 따옴표 구분없이 사용 가능하다. 
# 
# 문자열이 여러줄인 경우, 이를 멀티라인 스트링(multi-line string)이라 부르는데, 이때에는 트리플 따옴표만 사용 가능하다.

# In[13]:


'hi'


# 문자열을 print()에 넣지 않으면 홑 따옴표를 포함한 문자열을 출력한다. 
# 
# print()는 3장에서 설명하겠지만 문자열 또는 연산의 결과를 화면에 출력하라는 함수이다. 
# 
# 
# 이번에는 print()에 문자열을 넣어서 작성해보자.

# In[14]:


print('hello')


# In[15]:


print("Hello World")


# In[16]:


print('파이썬은 재밌어')


# 멀티라인 스트링인 경우, print()를 쓰지 않고 출력하는 것과 print()에 문자열을 넣어서 출력하는 것의 차이를 뚜렷하게 확인할 수 있다.

# In[17]:


"""안녕
반가워
파이썬
"""


# In[18]:


print("""안녕
반가워
파이썬
""")


# print()를 쓰지 않고 출력한 결과는 눈에 보이지 않았던 **줄바꿈기호(\n)**를 포함하여 출력한다.
# 
# 
# print()에 문자열을 넣어서 출력한 결과는 줄바꿈기호를 줄바꿈으로 인식하여 출력한다.

# In[19]:


print('7 apples, 14 oranges, 3 lemons')


# In[20]:


print('O*&#wY%*&OCfsdYO*& gfC%YO')


# 문자열은 문자뿐만 아니라 공백, 숫자, 특수문자를 포함할 수 있다.

# In[21]:


print('토트넘 홋스퍼의 손흥민이 19일(현지시간) 영국 런던의 토트넘 홋스퍼 스타디움에서 \
열린 2022~23시즌 잉글랜드 프리미어리그(EPL) 24라운드 웨스트햄 유나이티드와의 경기 후반 \
27분 해리 케인의 도움으로 팀의 두 번째 골(리그 5호)을 넣고 있다. 손흥민은 후반 교체 출전해 \
4분 만에 득점포를 가동했으며 토트넘은 2-0으로 승리하며 4위를 탈환했다.')


# 한줄의 문자열인데 길어서 일부러 줄을 바꾸고 싶을 때는 역슬래시(\\) 기호를 넣어준다. 이는 주로 문자열의 길이가 화면을 넘어갈 때 가독성을 위해 사용한다.

# ### 문자열 연산자(String operators)
# 
# 문자열도 +, * 연산자를 사용하는 것이 가능하다. 단, 문자열에서 +연산자는 문자열의 나열을 의미하며, *연산자는 문자열의 반복을 의미한다.
# 
# |연산 기호|의미|예시|실행 결과|
# |:----------:|:----------|:----------:|:--------:|
# |`+`|덧셈(Addition)| `'hello' + 'world'` |`helloworld`|
# |`*`|곱셈(Multiplication)| `'hello' * 3` | `hellohellohello`|
# 

# In[22]:


print('파이썬은'+' '+'즐거워! ')


# In[23]:


print( ('파이썬은'+' '+'즐거워! ') * 3 )


# ## 변수(Variable)
# 
# 숫자가 숫자로만 존재하거나, 문자가 문자로만 남아있다면 활용성이 떨어진다. 프로그래밍에서는 숫자, 문자 즉, 값(value)를 변수에 저장해 놓으면 훨씬 활용성을 높일 수 있다.
# 
# **변수**란 값을 저장하기 위한 이름을 가진 저장공간이며, **대입 연산자** 기호인 =를 이용하여 값을 저장한다.

# In[24]:


r = 10
pi = 3.14
S = pi * (r**2)
print('원의 넓이(S)', S)


# 변수는 필요한 만큼 여러개를 만들어 사용할 수 있다. 단 변수명을 지을때는 몇 가지 규칙이 있다.

# ### 변수명 짓는 규칙
# - 대소문자를 서로 다른 변수로 구별한다. 
# - 문자, 숫자, _(under bar)로 이루어진다.
# - 변수명에 공백이 들어갈 수 없다.
# - 숫자로 시작할 수 없다.
# - 예약어는 사용할 수 없다.
# 
# 

# **예약어**란 파이썬에서 내장되어 이미 사용하기로 정의된 키워드를 의미한다. 참고로 아래 코드를 통해 파이썬의 예약어와 개수를 확인해보자.

# In[25]:


import keyword
print(keyword.kwlist)
print(len(keyword.kwlist))


# Vaild names
# <pre><code>myvar = "Byun"
# my_var = "Byun"
# _my_var = "Byun"
# myVar = "Byun"
# MYVAR = "Byun"
# myvar2 = "Byun"
# </code></pre>
# 
# Invaild names
# <pre><code>2myvar = "Byun" #숫자로 시작할 수 없다.
# my-var = "Byun" #_이외의 특수문자가 들어갈 수 없다.
# my var = "Byun" # 공백이 들어갈 수 없다.
# if = "Byun" #예약어는 사용할 수 없다.
# </code></pre>

# 아직 함수에 대해 배우지 않았지만 사용자의 편의를 위해 파이썬에는 이미 만들어져 내장되어 있는 **내장함수**가 많다.
# 
# 예를들어, print(), input(), sum(), max(), min() ...등이 이에 속한다. 
# 
# 
# 클래스 또한 이 강좌에서 다루지는 않지만 파이썬에 이미 만들어져 있는 **클래스**가 많다.
# 예를 들어, list(), dict(), set(), int(), str(), ...등이 이에 속한다.
# 
# 
# 이러한 내장함수명이나 클래스명을 변수명으로 사용하지 말자. 
# 내장함수명이나 클래스명을 변수명으로 사용하면 기존에 정의되어 있는 내장함수나 클래스의 기능이 정상적으로 동작하지 않아 에러를 만나게 될 것이다.
# 
# 예를들어, input = 100, print='안녕하세요'

# :::{admonition} 내장함수명, 클래스명을 변수명 만들어 실행시켰다면!
# :class: warning
# 
# 내장함수명, 클래스명을 변수명 만들어 실행시켰다면 당황하지 말고, 해당 코드는 삭제하고 메뉴 런타임 >> 런타임 다시시작을 눌러 초기화 시켜주면 된다.

# :::{admonition} 한글 변수명도 가능할까?  
# :class: info
# 
# 물론, 한글 변수명도 가능하다. 한글 변수명을 사용하라고 말하고 싶지만 해외 운영체제의 경우 한글이 깨질 수 있으므로 가급적 영문변수명 사용을 권장한다.

# 다음에서 변수명으로 사용할 수 있는 것을 모두 골라보자.
# 1. sum
# 2. _count
# 3. 2nd_base
# 4. money$
# 5. True
# 6. King3

# ### 변수에 데이터 저장하기
# 
# 변수에 값을 저장해보자. 이를 프로그래밍에서는 변수에 값을 **할당한다**라고 말한다.
# 변수에 값을 할당하려면 대입연산자 기호인 =를 기준으로 왼쪽에는 변수명, 오른쪽에는 값 또는 표현식을 적는다.

# In[26]:


num = 100
hello = 'hi!'
print(num, hello)


# - 변수 num에 정수 10을 저장한다.
# - 변수 hello에 문자열 'hi!'를 저장한다.
# - 변수 num과 hello에 저장된 값을 출력한다. 결과는 10 hi!가 출력된다.

# <div align="center"><img src="https://haesunbyun.github.io/Basic-Computing/_images/ch02/variable.png" style="width:700px;"></div>

# :::{admonition} 변수와 객체  
# :class: info
# 
# 코드로 변수에 값을 저장하면 실제 컴퓨터에서는 어떻게 동작할까?
# 예를들어, 변수 num에 100을 저장했다면 100이라는 값이 메모리에 할당되는데 이를 **객체(object)**라고 한다. 
# 
# **객체**는 id, value, type을 갖고 있다. **id**는 메모리상에서의 객체의 주소이며, **value**는 메모리에 저장된 객체가 가지고 있는 값, **type**은 객체가 지원하는 연산을 정의하고 있는 객체의 타입을 의미한다. 
# 그리고 변수가 그 객체를 가르킨다. 
# 
# 변수 num 역시 메모리의 어딘가에 할당되는 공간인데, 그 공간에는 100이 저장되어 있는 객체의 메모리 주소가 저장되어 있다. 즉, 변수를 통해 실제 객체에 접근할 수 있게 된다. 
# 

# In[27]:


name = 'sun'
spam = hello + ' ' + name
print(spam)


# - 변수 name에 'sun'을 저장한다.
# - 변수 spam에 변수 hello와 공백, 변수 name의 값을 더해 저장한다.
# - 변수 spam의 값을 출력해보면 hi! sun이 출력된다.

# In[28]:


print('name')


# :::{admonition} 주의!
# :class: warning
# 
# 초보자의 경우, 변수명과 문자열에 익숙하지 않아 변수명에 문자열 처리를 하여 출력을 하는 실수를 범하기도 한다.
# 
# ```
# print('name')
# ```
# 위와 같이 코드를 작성했다면, 변수 name에 저장되어 있는 'sun'이 출력되는 것이 아니라 'name'이라는 문자열 자체가 출력될 것이다. 
# 변수 name과 문자열 'name'은 서로 다르다는 것에 주의하자.

# In[29]:


name = "young"
print(name)


# - 변수 name에 문자열 'young'을 저장한다.
# - 변수 name의 값을 출력해보면 young이 출력된다.
# 여러분은 변수의 중요한 특징 하나를 경험했다. 변수는 새로운 값을 저장하면 이전에 저장했던 값은 

# In[30]:


spam = """hello!!
python
world!
"""
spam


# In[31]:


spam1 = 'hi, there'
spam2 = 'KITTENS'
spam3 = '7 apples, 14 oranges, 3 lemons'
spam4 = 'Anything not pertaining to elephants is irrelephant.'
spam5 = 'Anything not pertaining to elephants \
is irrelephant.'
spam6 = 'O*&#wY%*&OCfsdYO*& gfC%YO'
spam5


# In[32]:


# 여러개의 변수 정의
eggs = 15
fizz = 10
spam = fizz + eggs
spam


# In[33]:


# 에러 이유는?
eggs = 20
fizz = 10
spam = fizz + eggz
spam


# In[ ]:


# 이 셀에 변수 fizz, eggs가 정의되어있지 않는데 결과가 나온다?
fizz + eggs


# In[ ]:


# 이 셀에 변수 a가 정의되어있지 않는데 결과가 나온다?
a


# ### [따라해보기] P.21

# In[ ]:





# ### [따라해보기] P.22

# In[ ]:





# In[ ]:


a='hello'
print(a+5)


# In[ ]:


print(a*5)


# ## 마무리
# - 변수는 컴퓨터 메모리 공간에 이름을 붙인 것으로 숫자나 문자열을 저장할 수 있다. 
# - 변수에 새로운 값을 저장하면 이전에 있던 값을 사라진다.
# - 문자열을 표현하기 위해서는 문자열의 앞과 뒤에 ' '(홑 따옴표)나 "  "(겹따옴표) 기호를 붙여야 한다.
# - ‘+’연산자를 통해 문자열과 문자열을 이어 붙일 수 있다.
